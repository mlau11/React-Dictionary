{"version":3,"sources":["serviceWorkerRegistration.js","data/language.js","components/Header/Header.js","components/Definitions/Definitions.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","categories","value","label","Header","language","setLanguage","word","setWord","lightMode","darkTheme","createTheme","palette","primary","main","type","className","ThemeProvider","theme","TextField","id","onChange","e","target","select","handleChange","languages","map","option","MenuItem","Definitions","meanings","src","phonetics","audio","style","backgroundColor","borderRadius","width","controls","mean","item","definitions","def","color","definition","example","synonyms","s","nanoid","App","useState","setMeanings","setLightMode","ModeSwitch","withStyles","switchBase","grey","checked","track","Switch","useEffect","a","axios","get","data","dictionaryApi","height","transition","Container","maxWidth","display","flexDirection","justifyContent","position","top","right","paddingTop","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.889f9b1b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const categories = [\n  { value: \"English\", label: \"en\" },\n  { value: \"Hindi\", label: \"hi\" },\n  { value: \"Spanish\", label: \"es\" },\n  { value: \"French\", label: \"fr\" },\n  { value: \"Japanese\", label: \"ja\" },\n  { value: \"Russian\", label: \"ru\" },\n  { value: \"German\", label: \"de\" },\n  { value: \"Italian\", label: \"it\" },\n  { value: \"Korean\", label: \"ko\" },\n  { value: \"Brazilian Portuguese\", label: \"pt-BR\" },\n  { value: \"Arabic\", label: \"ar\" },\n  { value: \"Turkish\", label: \"tr\" },\n];\n\nexport default categories;\n","import {\r\n  createTheme,\r\n  MenuItem,\r\n  TextField,\r\n  ThemeProvider,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./Header.css\";\r\nimport languages from \"../../data/language\";\r\n\r\nconst Header = ({ language, setLanguage, word, setWord, lightMode }) => {\r\n  const darkTheme = createTheme({\r\n    palette: {\r\n      primary: {\r\n        main: lightMode ? \"#000\" : \"#fff\",\r\n      },\r\n      type: lightMode ? \"light\" : \"dark\",\r\n    },\r\n  });\r\n\r\n  const handleChange = (language) => {\r\n    setLanguage(language);\r\n    setWord(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <span className=\"title\">{word ? word : \"Dictionary\"}</span>\r\n      <div className=\"inputs\">\r\n        <ThemeProvider theme={darkTheme}>\r\n          <TextField\r\n            className=\"search\"\r\n            id=\"standard-basic\"\r\n            label=\"Search a word\"\r\n            value={word}\r\n            onChange={(e) => setWord(e.target.value)}\r\n          />\r\n          <TextField\r\n            className=\"select\"\r\n            select\r\n            label=\"Language\"\r\n            value={language}\r\n            onChange={(e) => {\r\n              handleChange(e.target.value);\r\n            }}\r\n          >\r\n            {languages.map((option) => (\r\n              <MenuItem key={option.label} value={option.label}>\r\n                {option.value}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n        </ThemeProvider>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport \"./Definitions.css\";\r\n\r\nconst Definitions = ({ word, meanings, language, lightMode}) => {\r\n  return (\r\n    <div className=\"meanings\">\r\n      {meanings[0] && word && language === \"en\" && (\r\n        <audio\r\n          src={meanings[0].phonetics[0] && meanings[0].phonetics[0].audio}\r\n          style={{ backgroundColor: \"#fff\", borderRadius: 10, width: '100%' }}\r\n          controls\r\n        >\r\n          Your browser does not support audio elements.\r\n        </audio>\r\n      )}\r\n\r\n      {word === \"\" ? (\r\n        <span className=\"subtitle\">Start by typing a word in Search</span>\r\n      ) : (\r\n        meanings.map((mean) =>\r\n          mean.meanings.map((item) =>\r\n            item.definitions.map((def) => (\r\n              <div\r\n                key={nanoid()}\r\n                className=\"singleMeanings\"\r\n                style={{ \r\n                  backgroundColor: lightMode ? '#3b5360': \"white\",\r\n                  color: lightMode ? 'white': \"black\" }}\r\n              >\r\n                <b>{def.definition}</b>\r\n                <hr style={{ backgroundColor: \"black\", width: \"100%\" }} />\r\n                {def.example && (\r\n                  <span>\r\n                    <b>Example : </b>\r\n                    {def.example}\r\n                  </span>\r\n                )}\r\n                {def.synonyms && (\r\n                  <span>\r\n                    <b>Synonyms : </b>\r\n                    {def.synonyms.map((s) => `${s}, `)}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            ))\r\n          )\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Definitions;\r\n","import { Container, Switch, withStyles } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Header from \"./components/Header/Header\";\nimport Definitions from \"./components/Definitions/Definitions\";\nimport { grey } from \"@material-ui/core/colors\";\n\nfunction App() {\n  const [meanings, setMeanings] = useState([]);\n  const [word, setWord] = useState(\"\");\n  const [language, setLanguage] = useState(\"en\");\n  const [lightMode, setLightMode] = useState(false);\n\n  const ModeSwitch = withStyles({\n    switchBase: {\n      color: grey[300],\n      \"&$checked\": {\n        color: grey[500],\n      },\n      \"&$checked + $track\": {\n        backgroundColor: grey[500],\n      },\n    },\n    checked: {},\n    track: {},\n  })(Switch);\n\n  \n\n  useEffect(() => {\n    const dictionaryApi = async () => {\n      try {\n        const data = await axios.get(\n          `https://api.dictionaryapi.dev/api/v2/entries/${language}/${word}`\n        );\n  \n        setMeanings(data.data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    if(word) {\n      dictionaryApi();\n    }\n  }, [word, language]);\n\n  return (\n    <div\n      className=\"App\"\n      style={{ \n        height: \"100vh\", \n        backgroundColor: lightMode ? '#fff' : \"#282c34\",\n        color: lightMode ? 'black' : \"white\",\n        transition: 'all 0.5s linear'\n      }}\n    >\n      <Container\n        maxWidth=\"md\"\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          height: \"100vh\",\n          justifyContent: \"space-evenly\",\n        }}\n      >\n        <div\n          style={{ position: \"absolute\", top: 0, right: 15, paddingTop: 10 }}\n        >\n          <span>{lightMode ? 'Dark' : 'Light'} Mode</span>\n          <ModeSwitch\n            checked={lightMode}\n            onChange={() => setLightMode(!lightMode)}\n          />\n        </div>\n        <Header\n          language={language}\n          setLanguage={setLanguage}\n          word={word}\n          setWord={setWord}\n          lightMode={lightMode}\n        />\n        {meanings && (\n          <Definitions word={word} meanings={meanings} language={language} lightMode={lightMode} />\n        )}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();"],"sourceRoot":""}